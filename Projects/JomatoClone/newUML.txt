---
config:
  layout: elk
  theme: forest
  look: classic
---
classDiagram
direction TB
    class User {
	    int id
	    String name
	    Location location
	    Cart cart
    }
    class Cart {
	    -Restaurant restaurant
	    -List~Dish~ items
	    -double total
	    +addItem(Dish, int)
	    +clear()
	    +isEmpty()
	    +setRestaurant(Restaurant)
	    +getRestaurant()
    }
    class Restaurant {
	    String name
	    RestaurantOwner owner
	    Location location
	    Menu menu
	    boolean isAvailable
	    +foodPrepareComplete(Order, List~Dish~)
    }
    class RestaurantOwner {
	    String name
    }
    class Menu {
	    List~Dish~ dishes
	    +addDish(Dish)
    }
    class Dish {
	    String name
	    String description
	    double price
	    List~String~ dishImages
	    List~DishAddOn~ addOns
    }
    class DishAddOn {
	    String name
	    double price
    }
    class Order {
	    String orderId
	    User user
	    Restaurant restaurant
	    List~Dish~ items
	    Location deliveryLocation
	    IPaymentStrategy paymentStrategy
	    OrderStatus orderStatus
	    +setOrderStatus(OrderStatus)
	    +markPaid()
	    +isPaid()
	    +printInvoice()
    }
    class OrderStatus {
	    PENDING
	    PREPARING
	    READY_FOR_PICKUP
	    ASSIGNED_TO_DELIVERY
	    PICKED_UP
	    DELIVERED
    }
    class Location {
	    double latitude
	    double longitude
    }
    class ZomatoFacade {
	    +createUser(...)
	    +registerRestaurant(...)
	    +addDishToMenu(...)
	    +addToCart(...)
	    +placeOrder(...)
	    +makePayment(...)
	    +processOrder(...)
    }
    class ZomatoApplication {
	    +main(String[] args)
    }
    class OrderManager {
	    +createOrder(User)
	    +updateOrderStatus(Order, OrderStatus)
	    +onFoodPrepared(Order)
	    +onOrderDelivered(Order)
	    +processOrder(Order)
    }
    class FoodManager {
	    +prepareFood(Order)
    }
    class DeliveryManager {
	    +startDelivery(Order)
    }
    class RestaurantManager {
	    Map~String, Restaurant~ restaurants
	    +createRestaurant(Restaurant)
	    +canAcceptOrder(Restaurant)
    }
    class Rider {
	    String riderName
	    boolean isAvailable
	    Location currentLocation
	    +setAvailable(boolean)
	    +isAvailable()
    }
    class DeliveryMetaData {
	    String orderId
	    Location userLoc
	    Location restaurantLoc
    }
    class RiderAssignmentManager {
	    List~Rider~ riders
	    DistanceStrategy distanceStrategy
	    +setRiders(List~Rider~)
	    +setDistanceStrategy(DistanceStrategy)
	    +assignRider(Order) : Rider
    }
    class NotificationManager {
	    +notifyUser(String name, String message, INotificationSender)
    }
    class SMSNotificationSender {
	    +sendNotification(String name, String message)
    }
    class HaversineDistanceStrategy {
	    +calculateDistance(Location, Location)
    }
    class DistanceStrategy {
	    +calculateDistance(Location, Location)
    }
    class INotificationSender {
	    +sendNotification(String name, String message)
    }
    class IPaymentStrategy {
	    +pay(double amount)
    }
    class CreditCardPaymentStrategy {
	    +pay(double amount)
    }
    class UpiPaymentStrategy {
	    +pay(double amount)
    }
    class NetBankingPaymentStrategy {
	    +pay(double amount)
    }
	<<singleton>> OrderManager
	<<singleton>> FoodManager
	<<singleton>> DeliveryManager
	<<singleton>> RestaurantManager
	<<singleton>> RiderAssignmentManager
	<<singleton>> NotificationManager
	<<strategy>> HaversineDistanceStrategy
    User "1" --> "1" Cart
    User --> Location
    Cart --> "*" Dish
    Cart --> "1" Restaurant
    Restaurant --> Menu
    Restaurant --> RestaurantOwner
    Menu --> "*" Dish
    Dish --> "*" DishAddOn
    Order --> User
    Order --> "*" Dish
    Order --> Restaurant
    Order --> Location
    Order --> IPaymentStrategy
    Order --> OrderStatus
    ZomatoFacade --> OrderManager
    ZomatoFacade --> FoodManager
    ZomatoFacade --> DeliveryManager
    ZomatoFacade --> RestaurantManager
    ZomatoFacade --> NotificationManager
    ZomatoFacade --> RiderAssignmentManager
    ZomatoApplication --> ZomatoFacade
    DeliveryManager --> RiderAssignmentManager
    DeliveryManager --> DeliveryMetaData
    RiderAssignmentManager --> "*" Rider
    RiderAssignmentManager --> DistanceStrategy
    HaversineDistanceStrategy ..|> DistanceStrategy
    SMSNotificationSender ..|> INotificationSender
    CreditCardPaymentStrategy ..|> IPaymentStrategy
    UpiPaymentStrategy ..|> IPaymentStrategy
    NetBankingPaymentStrategy ..|> IPaymentStrategy
