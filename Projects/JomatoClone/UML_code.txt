---
config:
  layout: elk
  theme: forest
  look: classic
---

classDiagram
direction LR

class User {
    int id
    String name
    String address
    Cart cart
    Location location
}

class Cart {
    -Restaurant restaurant
    -List~Dish~ items
    -double total
    +addToCart(Dish)
    +clear()
    +isEmpty()
}

class Restaurant {
    String name
    Location location
    Menu menu
    boolean isAvailable
    RestaurantOwner owner
    FoodManager foodManager
    +processOrder(Order) : boolean
}

class FoodManager {
    +prepareFood(Order) : boolean
}

class Menu {
    List~Dish~ dishes
}

class Dish {
    String name
    String description
    double price
    List~String~ dishImages
    List~DishAddOn~ addOns
}

class DishAddOn {
    String name
    double price
}

class RestaurantManager {
    Map~String, Restaurant~ restaurants
    +addRestaurant(String, Restaurant)
    +getRestaurant(String) : Restaurant
}

class Order {
    String orderId
    User user
    Restaurant restaurant
    List~Dish~ items
    Location deliveryLocation
    PaymentStrategy IPaymentStrategy
    OrderStatus status
    +setStatus(OrderStatus)
    +getStatus() : OrderStatus
}

class OrderManager {
    Map~String, Order~ orders
    +createOrder(String, Order) : Order
    +getOrder(String) : Order
}

class OrderStatus {
    PENDING
    PREPARING
    READY_FOR_PICKUP
    ASSIGNED
    PICKED_UP
    DELIVERED
}

class PaymentStrategy {
    +pay(double)
}
class UPI {
    +pay(double)
}
class CreditCard {
    +pay(double)
}
class NetBanking {
    +pay(double)
}

class DeliveryMetaData {
    String orderId
    Location userLoc
    Location restaurantLoc
}

class DeliveryManager {
    +manageDelivery(Order)
}

class Rider {
    String riderId
    Location currentLocation
    boolean isAvailable
    double rating
    +setAvailable(boolean)
}

class RiderAssignmentManager {
    List~Rider~ riders
    DistanceStrategy distanceStrategy
    +assignRider(Order) : Rider
}

class DistanceStrategy {
    +calculate(Location, Location) : double
}
class HaversineDistanceStrategy {
    +calculate(Location, Location) : double
}

class INotificationSender {
    +sendNotification(String userId, String message)
}
class PushNotificationSender {
    +sendNotification(String userId, String message)
}
class SMSNotificationSender {
    +sendNotification(String userId, String message)
}
class NotificationManager {
    +addNotificationSender(String, String, INotificationSender)
    +notify(String, String)
    +notifyParticularUser(String, String, INotificationSender)
    +notifyStatus(Order)
}

class Location {
    double latitude
    double longitude
}

<<enumeration>> OrderStatus
<<interface>> PaymentStrategy
<<interface>> DistanceStrategy
<<interface>> INotificationSender

User "1" --> "1" Cart : owns
User --> Location : livesAt
Restaurant "1" *-- "1" Menu : has
Menu "1" *-- "*" Dish : contains
Dish "1" *-- "*" DishAddOn : includes
Cart "1" o-- "1" Restaurant : selectedFrom
Cart "1" --> "*" Dish : holds
RestaurantManager "1" --> "*" Restaurant : manages
User "1" --> "*" Order : places
Order "1" --> "1" Restaurant : orderedFrom
Order --> Location : deliveredTo
OrderManager "1" --> "*" Order : creates
OrderManager --> DeliveryManager : delegatesDelivery
Order --> OrderStatus
PaymentStrategy <|-- UPI
PaymentStrategy <|-- CreditCard
PaymentStrategy <|-- NetBanking
Order --> PaymentStrategy : uses
DeliveryManager --> DeliveryMetaData : creates
DeliveryManager --> RiderAssignmentManager : delegates
RiderAssignmentManager --> "*" Rider : manages
RiderAssignmentManager --> DistanceStrategy : uses
DistanceStrategy <|-- HaversineDistanceStrategy
INotificationSender <|-- PushNotificationSender
INotificationSender <|-- SMSNotificationSender
NotificationManager "1" --> "*" INotificationSender : uses
NotificationManager --> Order : notifyStatus
OrderManager --> NotificationManager : notifiesUserOnOrderCreate
DeliveryManager --> NotificationManager : notifiesUserOnDeliveryStatus
Restaurant --> FoodManager : uses
FoodManager --> Order : prepares
Restaurant --> Location : situatedAt
Rider --> Location : basedAt
DeliveryMetaData --> Location : includes
