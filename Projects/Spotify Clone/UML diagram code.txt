---
config:
  theme: forest
  layout: elk
  look: classic
---
classDiagram
direction LR
    class MusicPlayerApplication {
	    +vector~Song~ songs
	    +createSong(string, string, string)
	    +createPlaylist(string)
	    +addSong(string, string)
    }
    class MusicPlayerFacade {
	    +AudioEngine engine
	    +Playlist currPl
	    +PlayStrategy strategy
	    +connectDevice(DeviceType dt)
	    +setStrategy(StrategyType st)
	    +loadPlaylist(string name)
	    +playSong(Song song)
	    +play()
	    +pause()
	    +playNext()
	    +playPrev()
	    +enqueueNext()
    }
    class PlaylistManager {
	    +map~string, Playlist~ mp
	    +createPlaylist(string name)
	    +addSongToPL(string pname, Song song)
	    +getPlaylist(string name)
    }
    class DeviceManager {
	    +IAudioOutputDevice device
	    +connect(DeviceType dt)
	    +getDevice()
    }
    class DeviceFactory {
	    +createDevice(DeviceType dt)
    }
    class AudioEngine {
	    -Song currSong
	    +play(IAudioOutputDevice d, Song s)
	    +pause()
    }
    class Song {
	    +string title
	    +string artist
	    +string path
    }
    class Playlist {
	    +string name
	    +vector~Song~ list
	    +addSong(Song s)
    }
    class IAudioOutputDevice {
	    +playAudio(Song s)
    }
    class BluetoothSpeakerAdapter {
	    -BluetoothSpeakerAPI b
	    +playAudio(Song s)
    }
    class WiredSpeakerAdapter {
	    -WiredSpeakerAPI w
	    +playAudio(Song s)
    }
    class HeadphonesAdapter {
	    -HeadphonesAPI h
	    +playAudio(Song s)
    }
    class BluetoothSpeakerAPI {
	    +playSoundViaBluetooth(string data)
    }
    class WiredSpeakerAPI {
	    +playSoundViaCable(string data)
    }
    class HeadphonesAPI {
	    +playSoundVia(string data)
    }
    class StrategyManager {
	    +SequentialPlayStrategy s
	    +RandomPlayStrategy r
	    +CustomPlayStrategy c
	    +getStrategy(StrategyType st)
    }
    class PlayStrategy {
	    +setPlaylist(Playlist pl)
	    +hasNext()
	    +next()
	    +hasPrevious()
	    +previous()
	    +addToNext(Song s)
    }
    class SequentialPlayStrategy {
	    -Playlist pl
	    -int index
	    +setPlaylist(Playlist pl)
    }
    class RandomPlayStrategy {
	    -Playlist pl
	    +setPlaylist(Playlist pl)
    }
    class CustomPlayStrategy {
	    -Playlist pl
	    +setPlaylist(Playlist pl)
    }
    class DeviceType {
	    +BLUETOOTH
	    +WIRED
	    +HEADPHONES
    }
    class StrategyType {
	    +SEQUENTIAL
	    +RANDOM
	    +CUSTOM
    }
    <<Singleton>> MusicPlayerApplication
    <<Singleton>> MusicPlayerFacade
    <<Singleton>> PlaylistManager
    <<Singleton>> DeviceManager
    <<abstract>> IAudioOutputDevice
    <<Singleton>> StrategyManager
    <<abstract>> PlayStrategy
    MusicPlayerApplication --> MusicPlayerFacade : uses
    MusicPlayerApplication --> PlaylistManager : uses
    MusicPlayerApplication --> DeviceManager : uses
    MusicPlayerApplication --> StrategyManager : uses
    MusicPlayerApplication "1" --> "many" Song : owns
    MusicPlayerFacade --> AudioEngine : uses
    MusicPlayerFacade --> Playlist : uses
    MusicPlayerFacade --> PlayStrategy : uses
    MusicPlayerFacade --> DeviceManager : uses
    MusicPlayerFacade --> PlaylistManager : uses
    MusicPlayerFacade --> StrategyManager : uses
    DeviceManager *-- IAudioOutputDevice : has
    DeviceManager --> DeviceFactory : uses
    DeviceManager --> DeviceType : uses
    DeviceFactory --> BluetoothSpeakerAdapter : creates
    DeviceFactory --> WiredSpeakerAdapter : creates
    DeviceFactory --> HeadphonesAdapter : creates
    BluetoothSpeakerAdapter --> BluetoothSpeakerAPI : uses
    WiredSpeakerAdapter --> WiredSpeakerAPI : uses
    HeadphonesAdapter --> HeadphonesAPI : uses
    AudioEngine --> Song : plays
    AudioEngine --> IAudioOutputDevice : uses
    PlaylistManager *-- Playlist : manages
    Playlist "1" --> "many" Song : contains
    StrategyManager *-- SequentialPlayStrategy : uses
    StrategyManager *-- RandomPlayStrategy : uses
    StrategyManager *-- CustomPlayStrategy : uses
    StrategyManager --> StrategyType : uses
    PlayStrategy <|-- SequentialPlayStrategy
    PlayStrategy <|-- RandomPlayStrategy
    PlayStrategy <|-- CustomPlayStrategy
    IAudioOutputDevice <|-- BluetoothSpeakerAdapter
    IAudioOutputDevice <|-- WiredSpeakerAdapter
    IAudioOutputDevice <|-- HeadphonesAdapter
